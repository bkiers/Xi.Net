@page "/games/{gameId:int}"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (this.GameState.Value.IsLoading)
{
  <p>Loading...</p>
}

@if(GameState.Value.GameModel != null)
{
  var model = GameState.Value.GameModel;
  var game = model.Game!;

  if (!game.Accepted)
  {
    <h3>@game.RedPlayer.Name (red) - @game.BlackPlayer.Name (black)</h3>

    if (this.Current.LoggedInPlayerId() == game.InvitedPlayer.Id)
    {
      <p>Accept this game with @(game.SecondsPerMove / (24  * 60 * 60)) days per move?</p>
      <p>
        <button @onclick="@DeclineGame" type="button" class="btn btn-danger">Decline</button>
        <button @onclick="@AcceptGame" type="button" class="btn btn-success">Accept</button>
      </p>
    }
    else
    {
      <p>The game needs to be accepted by @(game.InvitedPlayer.Name).</p>
    }
  }
  else
  {
    <div class="container">
      <div class="left-element">
        <h3>Game @game.Id</h3>

        <PlayerComponent
          IsTop="@true"
          FlipBoard="@this.FlipBoard()"
          GameModel="@model" />

        <BoardComponent
          Board="@model.CurrentBoard()"
          HighlightedCells="@model.HighlightedCells(this.Current.LoggedInPlayer().ShowPossibleMoves)"
          FlipBoard="@this.FlipBoard()" />

        <PlayerComponent
          IsTop="@false"
          FlipBoard="@this.FlipBoard()"
          GameModel="@model" />
      </div>
      <div class="right-element">
        <MovesComponent GameModel="@model" />
      </div>
    </div>
  }
}

@if (this.GameState.Value.GameModel?.Game.CheckmatePlayer() != null)
{
  <Alert Message="@($"{this.GameState.Value.GameModel.Game.CheckmatePlayer()!.Name} is checkmate.")" Type="@Alert.AlertType.Warning" Dismissible="@false" />
}
else if (this.GameState.Value.GameModel?.Game.StalematePlayer() != null)
{
  <Alert Message="@($"{this.GameState.Value.GameModel.Game.StalematePlayer()!.Name} is stalemate.")" Type="@Alert.AlertType.Warning" Dismissible="@false" />
}
else if (this.GameState.Value.GameModel?.Game.CheckPlayer() != null)
{
  <Alert Message="@($"{this.GameState.Value.GameModel.Game.CheckPlayer()!.Name} is check.")" Type="@Alert.AlertType.Warning" Dismissible="@false" />
}
else if (this.GameState.Value.HasErrors)
{
  <Alert Message="@this.GameState.Value.ErrorMessage" Type="@Alert.AlertType.Info" />
}
